(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{510:function(e,n,t){__NEXT_REGISTER_PAGE("/docs/basics",function(){return e.exports=t(524),{page:e.exports.default}})},524:function(e,n,t){"use strict";t.r(n);var a=t(0),o=t.n(a),r=t(1),s=t(24),m=t(62),l=t(2),p=t(6),c=t(3),i='\n<iframe width="560" height="315" src="https://www.youtube.com/embed/bIK2NwoK9xk?start=89" frameborder="0" title="Styling React/ReactNative Applications - Max Stoiber" allowfullscreen></iframe>\n'.trim(),d=l.d.div.attrs({dangerouslySetInnerHTML:{__html:i}}).withConfig({displayName:"motivation__Video",componentId:"sc-1gkigih-0"})(["display:block;box-shadow:"," "," "," rgba(20,20,20,0.27);margin:"," 0;position:relative;width:560px;height:315px;padding-top:0;",";"],Object(c.a)(1),Object(c.a)(1),Object(c.a)(20),Object(c.a)(35),Object(p.b)(Object(l.c)(["padding-top:calc(1 / (16 / 9) * 100%);height:0;width:100%;& iframe{position:absolute;top:0;left:0;width:100%;height:100%;}"])));function u(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var g=function(e){var n=e.components;u(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Motivation"),o.a.createElement(r.MDXTag,{name:"p",components:n},"This talk by Max Stoiber is a really thorough introduction to styled-components\nand goes through what the motivations behind its creation were, along with some\nother information to get started with."),o.a.createElement(d,null))};function h(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var y=function(e){var n=e.components;h(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Getting Started"),o.a.createElement(r.MDXTag,{name:"p",components:n},"styled-components utilises tagged template literals to style your components."),o.a.createElement(r.MDXTag,{name:"p",components:n},"It removes the mapping between components and styles. This means that when you're defining your styles, you're actually creating a normal React component, that has your styles attached to it."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This example creates two simple components, a wrapper and a title, with some styles attached to it.\nYou can edit the code and get a feel for how you'd work with styled-components."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},"// Create a Title component that'll render an <h1> tag with some styles\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\n// Create a Wrapper component that'll render a <section> tag with some styles\nconst Wrapper = styled.section`\n  padding: 4em;\n  background: papayawhip;\n`;\n\n// Use Title and Wrapper like any other React component â€“ except they're styled!\nrender(\n  <Wrapper>\n    <Title>\n      Hello World, this is my first styled component!\n    </Title>\n  </Wrapper>\n);\n")),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"The CSS rules are automatically vendor prefixed, so you don't have to think about it.")))};function f(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var b=function(e){var n=e.components;f(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Coming from CSS"),o.a.createElement(r.MDXTag,{name:"h3",components:n},"How do Styled Components work within a component?"),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you're familiar with importing CSS into your components (e.g. like CSSModules)\nyou'll be used to doing something like this:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"import styles from './styles.css'\n\nclass Counter extends React.Component {\n  state = {\n    /* ... */\n  }\n  increment = () => {\n    /* ... */\n  }\n  decrement = () => {\n    /* ... */\n  }\n  render() {\n    return (\n      <div className={styles.counter}>\n        <p className={styles.paragraph}>{this.state.count}</p>\n        <button className={styles.button} onClick={this.increment}>\n          +\n        </button>\n        <button className={styles.button} onClick={this.decrement}>\n          -\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Counter\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Because a Styled Component is the ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"combination")," of the element and the rules\nthat style it, we'd write ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Counter")," like this:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"const StyledCounter = styled.div`\n  /* ... */\n`\nconst Paragraph = styled.p`\n  /* ... */\n`\nconst Button = styled.button`\n  /* ... */\n`\n\nclass Counter extends React.Component {\n  state = {\n    /* ... */\n  }\n  increment = () => {\n    /* ... */\n  }\n  decrement = () => {\n    /* ... */\n  }\n  render() {\n    return (\n      <StyledCounter>\n        <Paragraph>{this.state.count}</Paragraph>\n        <Button onClick={this.increment}>+</Button>\n        <Button onClick={this.decrement}>-</Button>\n      </StyledCounter>\n    )\n  }\n}\n\nexport default Counter\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},'Note that we added a "Styled" prefix to ',o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"StyledCounter")," so that the React\ncomponent ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Counter")," and the Styled Component ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"StyledCounter"),"\ndon't clash names but remain easily identifiable in the React Developer\nTools and Web Inspector."),o.a.createElement(r.MDXTag,{name:"h3",components:n},"Define Styled Components outside of the render method"),o.a.createElement(r.MDXTag,{name:"p",components:n},"It is important to define your styled components outside of the render method,\notherwise it will be recreated on every single render pass.\nDefining a styled component within the render method will thwart caching and\ndrastically slow down rendering speed, and should be avoided."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Write your styled components the recommended way:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"const StyledWrapper = styled.div`\n  /* ... */\n`\n\nconst Wrapper = ({ message }) => {\n  return <StyledWrapper>{message}</StyledWrapper>\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Instead of:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"const Wrapper = ({ message }) => {\n  // WARNING: THIS IS VERY VERY BAD AND SLOW, DO NOT DO THIS!!!\n  const StyledWrapper = styled.div`\n    /* ... */\n  `\n\n  return <StyledWrapper>{message}</StyledWrapper>\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},o.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"Recommended reading"),": ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://twitter.com/talialongname"}},"Talia Marcassa"),"\nwrote a great review of real-world usage, featuring lots of solid practical insights\nand comparisons with alternatives, in ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://medium.com/building-crowdriff/styled-components-to-use-or-not-to-use-a6bb4a7ffc21"}},"Styled Components: To Use or Not to Use?")),o.a.createElement(r.MDXTag,{name:"h3",components:n},"Psuedoelements, psuedoselectors, and nesting"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The preprocessor we use, ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/thysultan/stylis.js"}},"stylis"),", supports scss-like syntax for automatically nesting styles. Using an example component:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"const Thing = styled.div`\n  color: blue;\n`\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Psuedoselectors and psuedoelements without further refinement automatically are attached to the component:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},"const Thing = styled.button`\n  color: blue;\n\n  ::before {\n    content: 'ðŸš€';\n  }\n\n  :hover {\n    color: red;\n  }\n`\n\nrender(\n  <Thing>Hello world!</Thing>\n)\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"For more complex selector patterns, the ampersand (",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"&"),") can be used to refer back to the main component. Here are some more examples of its potential usage:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},'const Thing = styled.div.attrs({ tabIndex: 0 })`\n  color: blue;\n\n  &:hover {\n    color: red; // <Thing> when hovered\n  }\n\n  & ~ & {\n    background: tomato; // <Thing> as a sibling of <Thing>, but maybe not directly next to it\n  }\n\n  & + & {\n    background: lime; // <Thing> next to <Thing>\n  }\n\n  &.something {\n    background: orange; // <Thing> tagged with an additional CSS class ".something"\n  }\n\n  .something-else & {\n    border: 1px solid; // <Thing> inside another element labeled ".something-else"\n  }\n`\n\nrender(\n  <React.Fragment>\n    <Thing>Hello world!</Thing>\n    <Thing>How ya doing?</Thing>\n    <Thing className="something">The sun is shining...</Thing>\n    <div>Pretty nice day today.</div>\n    <Thing>Don\'t you think?</Thing>\n    <div className="something-else">\n      <Thing>Splendid.</Thing>\n    </div>\n  </React.Fragment>\n)\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you put selectors in without the ampersand, they will refer to children of the component."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},'const Thing = styled.div`\n  color: blue;\n\n  .something {\n    border: 1px solid; // an element labeled ".something" inside <Thing>\n    display: block;\n  }\n`\n\nrender(\n  <Thing>\n    <label htmlFor="foo-button" className="something">Mystery button</label>\n    <button id="foo-button">What do I do?</button>\n  </Thing>\n)\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Finally, the ampersand can be used to increase the specificity of rules on the component; this can be useful if you are dealing with a mixed styled-components and vanilla CSS environment where there might be conflicting styles:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},"const Thing = styled.div`\n  && {\n    color: blue;\n  }\n`\n\nconst GlobalStyle = createGlobalStyle`\n  div${Thing} {\n    color: red;\n  }\n`\n\nrender(\n  <React.Fragment>\n    <GlobalStyle />\n    <Thing>\n      I'm blue, da ba dee da ba daa\n    </Thing>\n  </React.Fragment>\n)\n")))};function T(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var E=function(e){var n=e.components;T(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Installation"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Install styled-components from npm:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"npm install --save styled-components\n")),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"Want to try out the new styled-components v4 beta? It's available now via:"),o.a.createElement(r.MDXTag,{name:"pre",components:n,parentName:"blockquote"},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"npm install --save styled-components@beta\n"))),o.a.createElement(r.MDXTag,{name:"p",components:n},"It's highly recommended (but not required) to also use the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/styled-components/babel-plugin-styled-components"}},"styled-components babel plugin"),". It offers many benefits like more legible class names, server-side rendering compatibility, smaller bundles, and more."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"npm install --save-dev babel-plugin-styled-components\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},'Then make sure the "styled-components" plugin is added to your ',o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".babelrc"),"."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'{\n  "presets": ["env", "react"],\n  "plugins": ["styled-components"]\n}\n')),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"If you don't already have babel set up in your project, their website has an ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://babeljs.io/en/setup"}},"installation instructions tool"),".")))};function w(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var M=function(e){var n=e.components;w(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Alternative Installation"),o.a.createElement(r.MDXTag,{name:"p",components:n},'If you\'re not using a module bundler or package manager we also have a global ("UMD") build hosted on the ',o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"http://unpkg.com"}},"unpkg")," CDN. Simply add the following ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"<script>")," tag to the bottom of your HTML file:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},';<script src="https://unpkg.com/styled-components/dist/styled-components.min.js" />\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Once you've added ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled-components")," you will have access to the global ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"window.styled")," variable."),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"This style of usage requires the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://reactjs.org/docs/cdn-links.html"}},"react CDN bundles")," to be on the page as well.")))};function D(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var v=function(e){var n=e.components;D(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Passed props"),o.a.createElement(r.MDXTag,{name:"p",components:n},"styled-components pass on their props using this algorithm:"),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"If the styled target is a simple element (e.g. ","`","styled.div","`","), pass through ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/emotion-js/emotion/blob/master/next-packages/is-prop-valid/src/props.js"}},"any known HTML attribute")," to the DOM")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"If the styled target is a custom React component (e.g. ","`","styled(MyComponent)","`","), pass through all props"))),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"For the first step, we do not maintain an exhaustive mapping of HTML element to allowed attributes because it would be prohibitively large and difficult to maintain. There is currently a ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/styled-components/styled-components/pull/1682#issuecomment-399496564"}},"v5 roadmap item")," to tackle this issue in the near future.")),o.a.createElement(r.MDXTag,{name:"p",components:n},"This example shows how all props of the Input component are passed on to the\nDOM node that is mounted, as with React elements."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},'  // Create an Input component that\'ll render an <input> tag with some styles\n  const Input = styled.input`\n    padding: 0.5em;\n    margin: 0.5em;\n    color: ${props => props.inputColor || "palevioletred"};\n    background: papayawhip;\n    border: none;\n    border-radius: 3px;\n  `;\n\n  // Render a styled text input with a placeholder of "@mxstbr", and one with a value of "@geelen"\n  render(\n    <div>\n      <Input placeholder="@mxstbr" defaultValue="@probablyup" type="text" />\n      <Input defaultValue="@geelen" type="text" inputColor="rebeccapurple" />\n    </div>\n  );\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Note that the \"inputColor\" prop is not passed to the DOM because it isn't a known HTML attribute. It's generally a safe bet that if you write all your styling props as camelCase they won't end up in the DOM as clutter for simple elements."))},X=t(7);function N(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var O=function(e){var n=e.components;N(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Adapting based on props"),o.a.createElement(r.MDXTag,{name:"p",components:n},'You can pass a function ("interpolations") to a styled component\'s template literal\nto adapt it based on its props.'),o.a.createElement(r.MDXTag,{name:"p",components:n},"This button component has a primary state that changes its colour.\nWhen setting the ",o.a.createElement(X.a,null,"primary")," prop to true, we are swapping out its background and text colour."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},'const Button = styled.button`\n  /* Adapt the colours based on primary prop */\n  background: ${props => props.primary ? "palevioletred" : "white"};\n  color: ${props => props.primary ? "white" : "palevioletred"};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nrender(\n  <div>\n    <Button>Normal</Button>\n    <Button primary>Primary</Button>\n  </div>\n);\n')))};function x(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var k=function(e){var n=e.components;x(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Styling any components"),o.a.createElement(r.MDXTag,{name:"p",components:n},"The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled")," method works perfectly on all of your own or any third-party\ncomponents as well, as long as they pass the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"className")," prop to their rendered sub-components,\nwhich should pass it too, and so on.\nUltimately, the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"className")," must be passed down the line to an actual DOM node for the styling to take any effect."),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"If you are using ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-native")," keep in mind to use ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"style")," instead of ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"className"),".")),o.a.createElement(r.MDXTag,{name:"p",components:n},"If you're using any external library, you can consider using this pattern to turn them\ninto styled components. The same pattern works for your own components as well, if you\nneed some components to stay unstyled on their own."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},"// This could be react-router-dom's Link for example\nconst Link = ({ className, children }) => (\n  <a className={className}>\n    {children}\n  </a>\n);\n\nconst StyledLink = styled(Link)`\n  color: palevioletred;\n  font-weight: bold;\n`;\n\nrender(\n  <div>\n    <Link>Unstyled, boring Link</Link>\n    <br />\n    <StyledLink>Styled, exciting Link</StyledLink>\n  </div>\n);\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Consider carefully whether to wrap your own components in a styled component, when it isn't necessary.\nYou will disable the automatic whitelisting of props, and reverse the recommended order of styled\ncomponents and structural components."),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can also pass tag names into the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled()")," factory call, like so: ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'styled("div")'),".\nIn fact, the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled.tagname")," helpers are just aliases that do the same."),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"styled-components always generates a real stylesheet with classes.\nThe classnames are then passed to the React component (including third party components)\nvia the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"className")," prop.")))};function S(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var C=function(e){var n=e.components;S(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Extending Styles"),o.a.createElement(r.MDXTag,{name:"p",components:n},"Quite frequently you might want to use a component, but change it slightly for\na single case. Now, you could pass in an interpolated function and change them\nbased on some props, but that's quite a lot of effort for overriding the styles\nonce."),o.a.createElement(r.MDXTag,{name:"p",components:n},"To easily make a new component that inherits the styling of another, just wrap it\nin the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled()")," constructor. Here we use the button from the last section\nand create a special one, extending it with some colour-related styling:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},"// The Button from the last section without the interpolations\nconst Button = styled.button`\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\n// A new component based on Button, but with some override styles\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nrender(\n  <div>\n    <Button>Normal Button</Button>\n    <TomatoButton>Tomato Button</TomatoButton>\n  </div>\n);\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"We can see that the new ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TomatoButton")," still resembles ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Button"),", while we have only\nadded two new rules."),o.a.createElement(r.MDXTag,{name:"p",components:n},"In some cases you might want to change which tag or component a styled component renders. This is common when building a navigation bar for example, where there are a mix of anchor links and buttons but they should be styled identically."),o.a.createElement(r.MDXTag,{name:"p",components:n},"For this situation, we have an escape hatch. You can use the ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"/docs/api#as-polymorphic-prop"}},o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"a"},'"as" polymorphic prop'))," to dynamically swap out the element that receives the styles you wrote:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},'const Button = styled.button`\n  display: inline-block;\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nconst TomatoButton = styled(Button)`\n  color: tomato;\n  border-color: tomato;\n`;\n\nrender(\n  <div>\n    <Button>Normal Button</Button>\n    <Button as="a" href="/">Link with Button styles</Button>\n    <TomatoButton as="a" href="/">Link with Tomato Button styles</TomatoButton>\n  </div>\n);\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"This works perfectly fine with custom components too!"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},"const Button = styled.button`\n  display: inline-block;\n  color: palevioletred;\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n`;\n\nconst ReversedButton = props => <button {...props} children={props.children.split('').reverse()} />\n\nrender(\n  <div>\n    <Button>Normal Button</Button>\n    <Button as={ReversedButton}>Custom Button with Normal Button styles</Button>\n  </div>\n);\n")))};function j(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var I=function(e){var n=e.components;j(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Attaching additional props | v2"),o.a.createElement(r.MDXTag,{name:"p",components:n},"To avoid unnecessary wrappers that just pass on some props to the rendered component,\nor element, you can use the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".attrs"),' constructor. It allows you to attach\nadditional props (or "attributes") to a component.'),o.a.createElement(r.MDXTag,{name:"p",components:n},"This way you can for example attach static props to an element, or pass a third-party prop\nlike ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"activeClassName")," to React Router's Link component. Furthermore you can also\nattach more dynamic props to a component. The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".attrs")," object also takes functions,\nthat receive the props that the component receives. The return value will be merged into the\nresulting props as well."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Here we render an ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Input")," component and attach some dynamic and static attributes\nto it:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},'const Input = styled.input.attrs({\n  // we can define static props\n  type: "password",\n\n  // or we can define dynamic ones\n  margin: props => props.size || "1em",\n  padding: props => props.size || "1em"\n})`\n  color: palevioletred;\n  font-size: 1em;\n  border: 2px solid palevioletred;\n  border-radius: 3px;\n\n  /* here we use the dynamically computed props */\n  margin: ${props => props.margin};\n  padding: ${props => props.padding};\n`;\n\nrender(\n  <div>\n    <Input placeholder="A small text input" size="1em" />\n    <br />\n    <Input placeholder="A bigger text input" size="2em" />\n  </div>\n);\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"As you can see, we get access to our newly created props in the interpolations, and\nthe ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"type")," attribute is passed down to the element."))};function B(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var P=function(e){var n=e.components;B(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"Animations"),o.a.createElement(r.MDXTag,{name:"p",components:n},"CSS animations with ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"@keyframes")," aren't scoped to a single component but you still don't want them\nto be global. This is why we export a ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"keyframes")," helper which will generate a unique name for your\nkeyframes. You can then use that unique name throughout your app."),o.a.createElement(r.MDXTag,{name:"p",components:n},"This way, you get all the benefits of using JavaScript, are avoiding name clashes and get your keyframes\nlike always:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-react",metaString:""}},"// keyframes returns a unique name based on a hash of the contents of the keyframes\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\n// Here we create a component that will rotate everything we pass in over two seconds\nconst Rotate = styled.div`\n  display: inline-block;\n  animation: ${rotate360} 2s linear infinite;\n  padding: 2rem 1rem;\n  font-size: 1.2rem;\n`;\n\nrender(\n  <Rotate>&lt; ðŸ’… &gt;</Rotate>\n);\n")))};function R(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var q=function(e){var n=e.components;R(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h2",components:n},"React Native"),o.a.createElement(r.MDXTag,{name:"p",components:n},"styled-components can be used with React Native in the same way and with the\nsame import. Try this example with ",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://snack.expo.io/@danielmschmidt/styled-components"}},"Snack by Expo"),"."),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"If you're not yet on v3 or higher, you will need to import styled-components\non React Native from ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"styled-components/native"),". This still works in v3\nbut has been deprecated.")),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledView = styled.View`\n  background-color: papayawhip;\n`\n\nconst StyledText = styled.Text`\n  color: palevioletred;\n`\n\nclass MyReactNativeComponent extends React.Component {\n  render() {\n    return (\n      <StyledView>\n        <StyledText>Hello World!</StyledText>\n      </StyledView>\n    )\n  }\n}\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"We also support more complex styles (like ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"transform"),"), which would normally\nbe an array, and shorthands (e.g. for ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"margin"),") thanks to\n",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"css-to-react-native"),"!"),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"Note that the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"flex")," property works like CSS shorthand, and not the legacy\n",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"flex")," property in React Native. Setting ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"flex: 1")," sets ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"flexShrink"),"\nto ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"1"),".")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Imagine how you'd write the property in React Native, guess how you'd transfer\nit to CSS, and you're probably right:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-jsx",metaString:""}},"const RotatedBox = styled.View`\n  transform: rotate(90deg);\n  text-shadow-offset: 10px 5px;\n  font-variant: small-caps;\n  margin: 5px 7px 2px;\n`\n")),o.a.createElement(r.MDXTag,{name:"p",components:n},"Some of the differences to the web-version are, that you cannot use the\n",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"keyframes")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"injectGlobal")," helpers since React Native doesn't support\nkeyframes or global styles. We will also warn you if you use media queries or\nnest your CSS."),o.a.createElement(r.MDXTag,{name:"blockquote",components:n},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"blockquote"},"In v2 we support percentages. To make this possible we need to enforce units\nfor all shorthands. If you're migrating to v2,\n",o.a.createElement(r.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/styled-components/styled-components-native-code-mod"}},"a codemod is available"),".")))};function W(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components,t=W(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",Layout:function(e){var n=e.children;return o.a.createElement(s.a,{title:"Basics",description:"Get Started with styled-components basics."},n)},layoutProps:t,components:n},o.a.createElement(g,null),o.a.createElement(E,null),o.a.createElement(M,null),o.a.createElement(y,null),o.a.createElement(b,null),o.a.createElement(v,null),o.a.createElement(O,null),o.a.createElement(k,null),o.a.createElement(C,null),o.a.createElement(I,null),o.a.createElement(P,null),o.a.createElement(q,null),o.a.createElement(m.a,{href:"/docs/advanced",title:"Advanced"}))}},62:function(e,n,t){"use strict";var a=t(0),o=t.n(a),r=t(2),s=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},m=r.d.svg.attrs({children:function(e){return null!=e.title?[o.a.createElement("title",{key:"KeyboardArrowRight-title"},e.title),o.a.createElement("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z",key:"k0"})]:[o.a.createElement("path",{d:"M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z",key:"k0"})]},viewBox:"0 0 24 24",height:function(e){return void 0!==e.height?e.height:e.size},width:function(e){return void 0!==e.width?e.width:e.size},"aria-hidden":function(e){return null==e.title?"true":void 0},focusable:"false",role:function(e){return null!=e.title?"img":void 0},fill:"currentColor"})(l||(l=s(["\n  display: inline-block;\n  vertical-align: middle;\n  overflow: hidden;\n"],["\n  display: inline-block;\n  vertical-align: middle;\n  overflow: hidden;\n"])));m.displayName="KeyboardArrowRight";var l,p=t(3),c=t(10),i=t(4),d=t(6),u=t(5),g=Object(r.d)(c.b).attrs({unstyled:!0,prefetch:!0}).withConfig({displayName:"NextPage__Wrapper",componentId:"xdq90t-0"})(["display:flex;flex-direction:row;align-items:stretch;justify-content:flex-end;width:100%;padding:"," ",";text-align:right;font-family:",";",";"],Object(p.a)(40),Object(p.a)(20),u.b,Object(d.a)(Object(r.c)(["text-align:left;justify-content:center;padding:"," ",";"],Object(p.a)(30),Object(p.a)(20)))),h=r.d.h3.withConfig({displayName:"NextPage__Text",componentId:"xdq90t-1"})(["font-weight:normal;padding-right:",";margin:0;"],Object(p.a)(20)),y=r.d.h2.withConfig({displayName:"NextPage__PageName",componentId:"xdq90t-2"})(["font-weight:600;padding-right:",";margin:0;"],Object(p.a)(20)),f=Object(r.d)(m).withConfig({displayName:"NextPage__Icon",componentId:"xdq90t-3"})(["color:",";width:",";"],i.c,Object(p.a)(30));n.a=function(e){var n=e.title,t=e.href;return o.a.createElement(g,{unstyled:!0,prefetch:!0,href:t},o.a.createElement("div",null,o.a.createElement(h,null,"Continue on the next page"),o.a.createElement(y,null,n)),o.a.createElement("div",null,o.a.createElement(f,null)))}},7:function(e,n,t){"use strict";var a=t(2),o=t(5),r=a.d.span.withConfig({displayName:"Code",componentId:"sc-1gu2r1r-0"})(["display:inline-block;font-family:",";font-size:90%;font-weight:300;padding:0 0.05em 0.1em;vertical-align:baseline;line-height:1.4;"],o.c);n.a=r}},[[510,1,0]]]);